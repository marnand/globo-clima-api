name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOCKER_IMAGE: 'globoclima-app'
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore GloboClima/GloboClima.csproj
      
    - name: Build
      run: dotnet build GloboClima/GloboClima.csproj --no-restore
      
    - name: Test
      run: dotnet test GloboClima/GloboClima.csproj --no-build --verbosity normal

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./GloboClima/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Build and deploy
      env:
        WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
      run: |
        echo "Preparando arquivos para deploy..."
    
    - name: Copy SSL and config files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml,nginx/,scripts/"
        target: "/home/${{ secrets.EC2_USER }}/"
      
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DOCKER_USERNAME,DOCKER_IMAGE,DOCKER_TAG
        script: |
          # Definir variáveis
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          export DOCKER_TAG=${{ env.DOCKER_TAG }}
          
          # Criar arquivo .env para docker-compose
          cat > .env << EOF
          DOCKER_USERNAME=${DOCKER_USERNAME}
          DOCKER_IMAGE=${DOCKER_IMAGE}
          DOCKER_TAG=${DOCKER_TAG}
          WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}
          EOF
          
          # Fazer login no Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          # Gerar certificado SSL se não existir
          if [ ! -f ssl/server.crt ]; then
            chmod +x scripts/generate-ssl.sh
            ./scripts/generate-ssl.sh
          fi
          
          # LIMPEZA COMPLETA - Parar e remover todos os containers relacionados
          echo "Parando containers existentes..."
          sudo docker stop globoclima-container globoclima-nginx globoclima-app || true
          sudo docker rm globoclima-container globoclima-nginx globoclima-app || true
          
          # Parar docker-compose
          sudo docker-compose down --remove-orphans || true
          
          # Verificar e matar processos usando as portas 80 e 443
          sudo fuser -k 80/tcp || true
          sudo fuser -k 443/tcp || true
          
          # Aguardar um momento para liberação das portas
          sleep 5
          
          # Baixar nova imagem
          sudo docker pull ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
          sudo docker tag ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_USERNAME}/${DOCKER_IMAGE}:latest
          
          # Iniciar containers (docker-compose lerá o arquivo .env automaticamente)
          sudo docker-compose up -d
          
          # Verificar se os containers estão rodando
          echo "Verificando status dos containers..."
          sudo docker ps
          
          # Limpar imagens não utilizadas
          sudo docker image prune -f
          
          # Mostrar informações de acesso
          echo "Deploy com HTTPS concluído!"
          echo "Domínio configurado: globoclima.dedyn.io"
          echo "Acesse: https://globoclima.dedyn.io"
          echo "Swagger: https://globoclima.dedyn.io/swagger"
          echo ""
          echo "NOTA: Certifique-se de que o DNS do domínio aponta para este servidor"
          echo "IP do servidor: $(curl -s ifconfig.me)"